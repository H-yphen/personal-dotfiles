### how to configure a fresh deb install
  
  ## configure wlan/eth
  
    # make sure you're root
    iwconfig
    # or ip a
    # or ip link
    # to get your interface name

    ip link set <interface> up
    # or ifup <interface>
    # to set it running 

    iwlist <interface> scan[ning] | grep -i ssid
    # to find a suitable network
    wpa_passphrase <ssid (network name)> <password in letters> >> /etc/network/interfaces
    # appends the command's output to your interfaces file

    # open the interfaces file
    cd /etc/network/
    nano interfaces
      #auto <interface> 
      allow-hotplug <interface>
      iface <interface> inet dhcp
      #iface <interface> inet auto
      #iface <interface> inet6 auto
        wpa-ssid <the appended ssid>
        wpa-psk <appended psk>
    #
    # also define your wlan card in devnames file, not sure if this is important or relevant,\
    but I found it in the setup file so why the hell not.
    lspci | grep Network >> /etc/network/devnames
    cd /etc/network
    nano devnames
      # it will be something like:
      <ID> Network controller: <device name> (rev something)
      # turn it into:
      <device name>
    # 
    # finally:
    dhclient <interface>
    # or wpa_supplicant -B -i<interface> -D<linux internet driver, usually wext/wired> -c<config file*>
    *the config file is a new file with the output generated by the command in line 17 (wpa_passphrase) ALONE

    ping 8.8.8.8
  # 
    
  ## configure APT
  
    # my favourite setup is Debian testing with unstable repos enabled for manual install
    # let's make that happen
    
    cd /etc/apt/
    nano sources.list
      #installer cd: 
      #deb cdrom:[Debian GNU/Linux some model numbers bleh]/ stretch contrib main non-free
      #deb cdrom:[Debian GNU/Linux some other model numbers bleh]/ stretch contrib main non-free
 
      #unused:
      
      #deb http://deb.debian.org/debian/ stretch main non-free contrib
      #deb-src http://deb.debian.org/debian/ stretch main non-free contrib

      #deb http://security.debian.org/debian-security stretch/updates main contrib main non-free
      #deb-src http://security.debian.org/debian-security stretch/updates main contrib main non-free

      # stretch-updates, previously known as 'volatile'
      #deb http://deb.debian.org/debian/ stretch-updates main contrib non-free
      #deb-src http://deb.debian.org/debian/ stretch-updates main contrib non-free

      # stretch-backports, previously on backports.debian.org
      #deb http://deb.debian.org/debian/ stretch-backports main contrib non-free
      #deb-src http://deb.debian.org/debian/ stretch-backports main contrib main non-free

      #main:

      deb http://deb.debian.org/debian/ testing main non-free contrib
      deb-src http://deb.debian.org/debian/ testing main non-free contrib

      deb http://security.debian.org/debian-security testing/updates main contrib main non-free
      deb-src http://security.debian.org/debian-security testing/updates main contrib main non-free

      # testing-updates, previously known as 'volatile'
      deb http://deb.debian.org/debian/ testing-updates main contrib non-free
      deb-src http://deb.debian.org/debian/ testing-updates main contrib non-free

      #unofficial:
      deb http://deb.debian.org/debian/ unstable main non-free contrib
      deb-src http://deb.debian.org/debian/ unstable main non-free contrib
    #  
      
      
    nano preferences
    # https://manpages.debian.org/stretch/apt/apt_preferences.5.en.html
    
      Package: *
      Pin: release a=testing
      Pin-Priority: 900

      Package: *
      Pin: release a=unstable
      Pin-Priority: 100
    #

    nano apt.conf
      APT::Default-Release "testing";
  #

  ## update and full/dist-upgrade and autoremove

  ## configure base packages
  tasksel
 
  ## install ufw and configure it
  ufw default deny incoming
  ufw logging disabled

  ## install networkmanager and get it running, once sure it's running delete/backup the interfaces file and\
  # let nm automate the process
  
  ## install ntpupdate for internet clock
  ## install localepurge to get rid of unnecessary locales
  ## install sound and video drivers
  	# Sound: alsa-utils
	# Video: xf86-video-intel mesa
  ## install xorg and a wm
#


# it is advised to install and configure packages as a user or sudo user not as root



# change default file opener (to thunar here)
xdg-mime default Thunar.desktop inode/directory application
# check
xdg-mime query default inode/directory


## git

  # how to add cached password in git 
  git config --global credential.helper cache
  git config --global credential.helper 'cache --timeout=21600' 
  # 21600 is six hours

  # add username and email for commits
  git config --global user.email something@somewhere
  git config --global user.name someone

#


# install a ttf font for a local user only
mkdir ~/.fonts
mv <font.ttf> ~/.fonts




## scripting
  # the bash declaration is #!/bin/bash

  # pass arguments to your bash file
  meaningfulname=$1 # this means the first argument supplied
  do something with $1

  #idk
#

## BASh .. What goes where
https://superuser.com/questions/789448/choosing-between-bashrc-profile-bash-profile-etc

  >  ~/.profile has the stuff NOT specifically related to bash, such as environment variables (PATH and friends)

  >  ~/.bashrc has anything you\'d want at a logged in interactive command line. Command prompt, user-specific EDITOR variable, bash aliases for my use, etc...
It\'s preferred if you source .bash_aliases to .bashrc instead of using bashrc directly for aliases. 
It\'s also better if you create ~/.bashrc.d/ and divide your configs across different files then source through bashrc

if [ -f ~/.bash_aliases]; then
	. ~/.bash_aliases
fi

if [ -d ~/.bash.d ]; then
    for i in ~/.bash.d/*; do
        [ -f "${i}" ] && source "${i}"
    done
fi

A few other notes:

  >  Anything that should be available to graphical applications OR to sh (or bash invoked as sh) MUST be in ~/.profile

  >  ~/.bashrc must not output anything

  >  Anything that should be available only to login shells should go in ~/.profile

  >  Ensure that ~/.bash_login does not exist.





## configuring i3

  # find out your mod keys
  xmodmap

  # make a font work in i3
  font pango:fontfamily, otherfontfamily, otherfontfamily <height in float>
  # ex: font pango:Inconsolata, Awesome 10.5

  # assign a window to a workspace:
  # find your window class for window-workspace assignments
  xprop
  # cursor changes to a new shape
  # click on the wanted window
  # xprop outputs few details
  # WM_CLASS(STRING) = value.lower , Value
  # Value is what we want

  #in i3's config
  assign [class="Value"] workspacevariable

  #make certain classes/instances/etc behave in certain ways
  for_window [class="Value"] behaviour

  # set a variable in i3config
  set $variable value

#


## Deb/APT tools:

  # mark a package to auto install after accidentally turning it to manual
  apt-mark auto (Package)

  # checkinstall turns your tarball into a deb package
  # REMEMBER TO ADD A VERSION NUMBER AND DEPENDENCIES TO YOUR Package

  # dpkg:
  dpkg -i #installs a deb
  dpkg -V #verify
  dpkg -Ri #recursive install (install a directory of debs)
  dpkg -r #removes the installed deb package
  dpkg -Pr #purge remove

  # remove extra unneeded packages
  deborphan --guess-all

  # How to list dependent packages in both # dependencies (aka check if the package is a dependency to something you're interested in) and
  # reverse dependencies (aka check if the package you're removing is a dependency to something installed)

  apt-cache [--installed] rdepends <packagename> # very useful
  apt-cache [--installed] depends <packagename>
  apt show <package>

#



# mount any filesystem
udisksctl mount -b /dev/sd[blocknumber]

# etc/fstab is your goto to automount filesystems on startup
# it goes like this for each line:
# UUID    mountpoint    filesystem_type    defaults  dump_number(0)   fsck_number(0?)**

# **fsck number is the mounting order. according to manpage:
    This field is used by fsck(8) to determine the  order  in  which
    filesystem  checks  are  done at boot time.  The root filesystem
    should be specified with a fs_passno of  1.   Other  filesystems
    should  have  a fs_passno of 2.  Filesystems within a drive will
    be checked sequentially, but  filesystems  on  different  drives
    will  be  checked at the same time to utilize parallelism avail-
    able in the hardware.  Defaults to  zero  (don't  fsck)  if  not
    present.

# x-systemd.automount option auto-mounts the partition AFTER boot. Instead of auto that does it on boot with mount -a
# This is to avoid boot failure


# Example:
# My fstab setup for automounting NTFS partition:

# /etc/fstab: static file system information.
#
# Use 'lsblk' and 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

### the regular partition stuff here ###

#Entry for /dev/sda5 (OS):
UUID=[short version, not the one with dashes]	[mountpoint]/media/hazem/OS	[tool type]ntfs-3g	auto,locale=en_US.utf8,gid=1001,uid=1000,umask=013  	0	0

# make sure to mount -a / mount [your edited dev block fstab entry] before rebooting, to catch any errors or typos. If you reboot with a mount error, you won't be able to access your system.





# To find the script that runs your program type:
which <program>
ex: which neofetch
# this returns a path.
# edit the script if you want to
sudo nano $(which neofetch) 




# automounting flash drives:
udiskie + udisks2

# policy kit:
# /etc/polkit-1/rules.d/50-udisks.rules (doesn't work properly, not sure why)
polkit.addRule(function(action, subject) {
  var YES = polkit.Result.YES;
  var permission = {
    // only required for udisks1:
    "org.freedesktop.udisks.filesystem-mount": YES,
    "org.freedesktop.udisks.filesystem-mount-system-internal": YES,
    "org.freedesktop.udisks.luks-unlock": YES,
    "org.freedesktop.udisks.drive-eject": YES,
    "org.freedesktop.udisks.drive-detach": YES,
    // only required for udisks2:
    "org.freedesktop.udisks2.filesystem-mount": YES,
    "org.freedesktop.udisks2.filesystem-mount-system": YES,
    "org.freedesktop.udisks2.encrypted-unlock": YES,
    "org.freedesktop.udisks2.eject-media": YES,
    "org.freedesktop.udisks2.power-off-drive": YES,
    // required for udisks2 if using udiskie from another seat (e.g. systemd):
    "org.freedesktop.udisks2.filesystem-mount-other-seat": YES,
    "org.freedesktop.udisks2.encrypted-unlock-other-seat": YES,
    "org.freedesktop.udisks2.eject-media-other-seat": YES,
    "org.freedesktop.udisks2.power-off-drive-other-seat": YES
  };
  if (subject.isInGroup("users")) {
    return permission[action.id];
  }
});





# to change your cursor theme and make sure it works on all apps:
sudo update-alternatives --config x-cursor-theme

# .Xresources is another way to config your apps. It must be merged into xrdb before it takes effect
xrdb -merge ~/.Xresources
# It's better than Xdefaults


# add groups and users
Now it's time to create a group. Let's create the group editorial. To do this, you would issue the command:

sudo groupadd editorial

Now we want to add our new user, olivia, to the group editorial. For this we will take advantage of the usermod command. This command is quite simple to use.

sudo usermod -aG editorial olivia


# Bluetooth setup:
# Things you'll need:
firmware-atheros (for this laptop)
bluez
blueman # light gui plus sets everything up nicely
obexfs (probably)


# nm-applet's package is actually network-manager-gnome

# wpgtk is the package for auto colour schemes. lxappearance is also useful.


# packages:

music: cmus/ncmpcpp
video: mpv
bittorrent: transmission
file manager:
	gui: Thunar
	cli: ranger
audio controls: pulseaudio installed as user not root
audio driver: alsa-utils


#configure URXVT to behave more intuitively (like gnome terminal for example)
https://superuser.com/questions/1247281/how-to-configure-rxvt-unicode-to-behave-similar-to-gnome-terminal-or-others-f

#piping commands the guide
https://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file

readlink -> follow symlinks
stat -> find file status (like perms)

# looping inside a file:
while read i; do something ; done < filename

# when using find 
remember it goes like this: find path > expression > action
never order it in any other way.

So, you like GTK themes but don't like how Firefox handles them on buttons and input fields?
here's how to fix that:
about:config
create widget.content.gtk-theme-override and give it a string value of your favourite theme's light variant, or any light theme. Case sensitive
e.g.
Plata-Lumine-Compact



# some cursor themes are "zero-byte" according to @Gewgaw. That means they 
# depend on a base cursor theme to function properly.
#
# You may move them to the same directory of the base theme or do the 
# opposite.

mv ~/.local/share/icons/Breeze-blue /usr/share/icons/ (where Breeze-cursor 
exists)


